//
// =BEGIN MIT LICENSE
// 
// The MIT License (MIT)
//
// Copyright (c) 2014 The CrossBridge Team
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
// 
// =END MIT LICENSE
//

// author: Andras Csizmadia

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url 'https://raw.githubusercontent.com/vpmedia/mvnrepository/master'
    }
    maven {
        url 'https://oss.sonatype.org/content/groups/public/'
    }
}

configurations {
    compile
    test
}

dependencies {
    test group: 'org.apache', name: 'flexunit-tasks', version: '4.2.0-20140410', ext: 'jar'
    test group: 'org.apache', name: 'flexunit-as3', version: '4.2.0-20140410', ext: 'swc'
    test group: 'org.apache', name: 'flexunit-cilistener', version: '4.2.0-20140410', ext: 'swc'
    test group: 'org.apache', name: 'flexunit-uilistener', version: '4.2.0-20140410', ext: 'swc'
    test group: 'org.apache', name: 'hamcrest-as3', version: '1.1.3', ext: 'swc'
}

//----------------------------------
//  SDK
//----------------------------------

String AIR_HOME = System.getenv('AIR_HOME')
String FLEX_HOME = System.getenv('FLEX_HOME')
ant.FLEX_HOME = "${FLEX_HOME}"

//----------------------------------
//  Core
//----------------------------------

// Get version from Jenkins CI
if("${System.env.JENKINS_BUILD_VERSION}" != "null") {
    version = "${System.env.JENKINS_BUILD_VERSION}"
}

//----------------------------------
//  Folders
//----------------------------------

def binDir = new File(projectDir, '/bin')
def buildDir = new File(projectDir, '/build')
def reportDir = new File(projectDir, '/build/reports')
def confDir = new File(projectDir, '/temp')

//----------------------------------
//  Tasks
//----------------------------------

task clean << {
    if (binDir.isDirectory()) {
        delete(binDir)
    }
    if (buildDir.isDirectory()) {
        delete(buildDir)
    }
    if (confDir.isDirectory()) {
        delete(confDir)
    }
}

task copyDeps(type: Copy) {
    from configurations.all
    into binDir
}

task compile_init << {
    confDir.mkdirs()
    ant.copy(todir: confDir) {
        fileset(dir : '.', includes: '.flexConfig.xml' )
    }    
    ant.replace(dir: confDir, token: '${viewport_width}', value: '800')
    ant.replace(dir: confDir, token: '${viewport_height}', value: '600')
    ant.replace(dir: confDir, token: '${viewport_scale}', value: '1')
    ant.replace(dir: confDir, token: '${version}', value: "${version}")
    ant.replace(dir: confDir, token: '${debug}', value: 'true')
    ant.replace(dir: confDir, token: '${player_version}', value: '14.0')
    ant.replace(dir: confDir, token: '${swf_version}', value: '25')
    ant.replace(dir: confDir, token: '${assets}', value: '')
    ant.replace(dir: confDir, token: '${vars}', value: '')
}

task compile(type: JavaExec) { 
    main = "com.adobe.flash.compiler.clients.MXMLC"
    classpath = files("${AIR_HOME}/lib/compiler.jar")
    workingDir = "${projectDir}"
    def argsList = [
                'ClientLibExample.as',
                '-debug=true',
                '-load-config+="temp/.flexConfig.xml"',
                '-output="build/ClientLibExample.swf"'
            ]
    def airConfig = "${AIR_HOME}" + '/frameworks/flex-config.xml'
    def loadAirConfig = '-load-config+='+"${airConfig}";
    argsList.push(loadAirConfig)
    args = argsList
}

task test << { 
    if (reportDir.isDirectory()) {
        delete("${reportDir}")
    }
    reportDir.mkdirs()
    ant.taskdef(resource: 'flexUnitTasks.tasks', classpath: configurations.test.asPath) 
    ant.flexunit(workingDir:'bin',toDir:'build/reports',haltonfailure:'false',verbose:'true',player:'flash',headless:'false',localTrusted:'true') {
        source(dir: '.')
        testSource(dir: '.') {
           include(name: '**/*Test.as')
        }
        library(dir: 'bin')
        library(dir: 'publish')
    }
}

compile.dependsOn copyDeps
test.dependsOn copyDeps

defaultTasks 'clean', 'test'
